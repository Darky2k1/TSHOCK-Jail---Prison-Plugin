<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TShockAPI</name>
    </assembly>
    <members>
        <member name="T:Rests.VerifyD">
            <summary>
            
            </summary>
            <param name="username">Username to verify</param>
            <param name="password">Password to verify</param>
            <returns>Returning a restobject with a null error means a successful verification.</returns>
        </member>
        <member name="T:TShockAPI.IPackable">
            <summary>
            Derived objects can be written to and read from streams.
            </summary>
        </member>
        <member name="M:TShockAPI.IPackable.Pack(System.IO.Stream)">
            <summary>
            Writes object information to the stream
            </summary>
            <param name="stream">Stream to write to</param>
        </member>
        <member name="M:TShockAPI.IPackable.Unpack(System.IO.Stream)">
            <summary>
            Reads object information from the stream
            </summary>
            <param name="stream">Stream to read from</param>
        </member>
        <member name="P:TShockAPI.PacketBufferer.BytesPerUpdate">
            <summary>
            Maximum number of bytes to send per update per socket
            </summary>
        </member>
        <member name="M:TShockAPI.DB.DbExt.Query(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Rows affected by query</returns>
        </member>
        <member name="M:TShockAPI.DB.DbExt.QueryReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Executes a query on a database.
            </summary>
            <param name="olddb">Database to query</param>
            <param name="query">Query string with parameters as @0, @1, etc.</param>
            <param name="args">Parameters to be put in the query</param>
            <returns>Query result as IDataReader</returns>
        </member>
        <member name="P:Rests.RestVerbs.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.ListAllPublicWarps(System.String)">
            <summary>
            Gets all the warps names from world
            </summary>
            <param name="worldid">World name to get warps from</param>
            <returns>List of warps with only their names</returns>
        </member>
        <member name="M:TShockAPI.DB.WarpManager.HideWarp(System.String,System.Boolean)">
            <summary>
            Gets all the warps names from world
            </summary>
            <param name="worldid">World name to get warps from</param>
            <returns>List of warps with only their names</returns>
        </member>
        <member name="M:TShockAPI.FileTools.SetupConfig">
            <summary>
            Sets up the configuration file for all variables, and creates any missing files.
            </summary>
        </member>
        <member name="M:TShockAPI.FileTools.OnWhitelist(System.String)">
            <summary>
            Tells if a user is on the whitelist
            </summary>
            <param name="ip">string ip of the user</param>
            <returns>true/false</returns>
        </member>
        <member name="P:TShockAPI.CommandArgs.Parameters">
            <summary>
            Parameters passed to the arguement. Does not include the command name.
            IE '/kick "jerk face"' will only have 1 argument
            </summary>
        </member>
        <member name="M:TShockAPI.Commands.ParseParameters(System.String)">
            <summary>
            Parses a string of parameters into a list. Handles quotes.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.TShock.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handles exceptions that we didn't catch or that Red fucked up
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TShockAPI.TShock.ServerHooks_OnCommand(System.String,System.ComponentModel.HandledEventArgs)">
            <summary>
            When a server command is run.
            </summary>
            <param name="cmd"></param>
            <param name="e"></param>
        </member>
        <member name="M:TShockAPI.TShock.SendBytes(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to client using packetbuffering if available
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="M:TShockAPI.TShock.SendBytesBufferless(Terraria.ServerSock,System.Byte[])">
            <summary>
            Send bytes to a client ignoring the packet buffer
            </summary>
            <param name="client">socket to send to</param>
            <param name="bytes">bytes to send</param>
            <returns>False on exception</returns>
        </member>
        <member name="E:TShockAPI.TShock.Initialized">
            <summary>
            Called after TShock is initialized. Useful for plugins that needs hooks before tshock but also depend on tshock being loaded.
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.GetRealIP(System.String)">
            <summary>
            Provides the real IP address from a RemoteEndPoint string that contains a port and an IP
            </summary>
            <param name="mess">A string IPv4 address in IP:PORT form.</param>
            <returns>A string IPv4 address.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayers">
            <summary>
            Used for some places where a list of players might be used.
            </summary>
            <returns>String of players seperated by commas.</returns>
        </member>
        <member name="M:TShockAPI.Utils.GetPlayerIP(System.String)">
            <summary>
            Finds a player and gets IP as string
            </summary>
            <param name="msg">Player name</param>
        </member>
        <member name="M:TShockAPI.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            It's a clamp function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">Value to clamp</param>
            <param name="max">Maximum bounds of the clamp</param>
            <param name="min">Minimum bounds of the clamp</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.Utils.SaveWorld">
            <summary>
            Saves the map data
            </summary>
        </member>
        <member name="M:TShockAPI.Utils.Broadcast(System.String)">
            <summary>
            Broadcasts a message to all players
            </summary>
            <param name="msg">string message</param>
        </member>
        <member name="M:TShockAPI.Utils.SendLogs(System.String,Color)">
            <summary>
            Sends message to all users with 'logs' permission.
            </summary>
            <param name="log"></param>
            <param name="color"></param>
        </member>
        <member name="M:TShockAPI.Utils.ActivePlayers">
            <summary>
            The number of active players on the server.
            </summary>
            <returns>int playerCount</returns>
        </member>
        <member name="M:TShockAPI.Utils.FindPlayer(System.String)">
            <summary>
            
            </summary>
            <param name="ply"></param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.Utils.ForceKickAll(System.String)">
            <summary>
            Kicks all player from the server without checking for immunetokick permission.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.ForceKick(TShockAPI.TSPlayer,System.String)">
            <summary>
            Kicks a player from the server without checking for immunetokick permission.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.Kick(TShockAPI.TSPlayer,System.String,System.String)">
            <summary>
            Kicks a player from the server.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.Ban(TShockAPI.TSPlayer,System.String,System.String)">
            <summary>
            Bans and kicks a player from the server.
            </summary>
            <param name="ply">int player</param>
            <param name="reason">string reason</param>
        </member>
        <member name="M:TShockAPI.Utils.ShowFileToUser(TShockAPI.TSPlayer,System.String)">
            <summary>
            Shows a file to the user.
            </summary>
            <param name="ply">int player</param>
            <param name="file">string filename reletave to savedir</param>
        </member>
        <member name="M:TShockAPI.Utils.GetGroup(System.String)">
            <summary>
            Returns a Group from the name of the group
            </summary>
            <param name="ply">string groupName</param>
        </member>
        <member name="M:TShockAPI.Utils.GetIPv4Address(System.String)">
            <summary>
            Returns an IPv4 address from a DNS query
            </summary>
            <param name="hostname">string ip</param>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.Byte[])">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.HashPassword(System.String)">
            <summary>
            Returns a Sha256 string for a given string
            </summary>
            <param name="bytes">bytes to hash</param>
            <returns>string sha256</returns>
        </member>
        <member name="M:TShockAPI.Utils.ValidString(System.String)">
            <summary>
            Checks if the string contains any unprintable characters
            </summary>
            <param name="str">String to check</param>
            <returns>True if the string only contains printable characters</returns>
        </member>
        <member name="M:TShockAPI.Utils.MaxChests">
            <summary>
            Checks if world has hit the max number of chests
            </summary>
            <returns>True if the entire chest array is used</returns>
        </member>
        <member name="M:TShockAPI.HandlerList`1.Register(System.EventHandler{`0},TShockAPI.HandlerPriority,System.Boolean)">
            <summary>
            Register a handler
            </summary>
            <param name="handler">Delegate to be called</param>
            <param name="priority">Priority of the delegate</param>
            <param name="gethandled">Should the handler receive a call even if it has been handled</param>
        </member>
        <member name="P:Rests.RestObject.Item(System.String)">
            <summary>
            Gets value safely, if it does not exist, return null. Sets/Adds value safely, if null it will remove.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>Returns null if key does not exist.</returns>
        </member>
        <member name="T:TShockAPI.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TShockAPI.Resources.groups">
             <summary>
               Looks up a localized string similar to #Format
            #name parent permisson1 permission2 permissionN
            #if there is no parent, put null instead
            #groups inherit permissions from their parents
            #put a ! before a permission to negate it
            #Do not remove the group default
            #Do not name a group SuperAdmin, that is hard-coded into the code, it grants total permissions
            #ALWAYS DECLARE A GROUP&apos;S PARENT BEFORE YOU DECLARE THE GROUP
            
            #currently avaliable permissions: 
            #reservedslot	- reserved slot for player
            #canwater		- allow players to use water
            #canlav [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:TShockAPI.Resources.itembans">
             <summary>
               Looks up a localized string similar to #see https://github.com/TShock/TShock/wiki/Item-List for a list of item ids
            #List each banned item ID below this, with each on a new line.
             </summary>
        </member>
        <member name="P:TShockAPI.Resources.users">
             <summary>
               Looks up a localized string similar to #format
            #ip group
            #see groups.txt for a list of groups
            #127.0.0.1 superadmin.
             </summary>
        </member>
        <member name="M:TShockAPI.DB.GroupManager.AddGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Adds group with name and permissions if it does not exist.
            </summary>
            <param name="name">name of group</param>
            <param name="parentname">parent of group</param>
            <param name="permissions">permissions</param>
        </member>
        <member name="P:TShockAPI.TSPlayer.TPlayer">
            <summary>
            Terraria Player
            </summary>
        </member>
        <member name="T:Rests.RestCommandD">
            <summary>
            Rest command delegate
            </summary>
            <param name="parameters">Parameters in the url</param>
            <param name="verbs">{x} in urltemplate</param>
            <returns>Response object or null to not handle request</returns>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TileEdit">
            <summary>
            TileEdit - called when a tile is placed or destroyed
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.TogglePvp">
            <summary>
            TogglePvp - called when a player toggles pvp
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerSlot">
            <summary>
            PlayerSlot - called at a PlayerSlot event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerHP">
            <summary>
            PlayerHP - called at a PlayerHP event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerMana">
            <summary>
            PlayerMana - called at a PlayerMana event
            </summary>
        </member>
        <member name="F:TShockAPI.GetDataHandlers.PlayerInfo">
            <summary>
            PlayerInfo - called at a PlayerInfo event
            If this is cancelled, the server will ForceKick the player. If this should be changed in the future, let someone know.
            </summary>
        </member>
        <member name="M:TShockAPI.DB.UserManager.AddUser(TShockAPI.DB.User)">
            <summary>
            Adds a given username to the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.RemoveUser(TShockAPI.DB.User)">
            <summary>
            Removes a given username from the database
            </summary>
            <param name="user">User user</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserPassword(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the Hashed Password for a given username
            </summary>
            <param name="user">User user</param>
            <param name="group">string password</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.SetUserGroup(TShockAPI.DB.User,System.String)">
            <summary>
            Sets the group for a given username
            </summary>
            <param name="user">User user</param>
            <param name="group">string group</param>
        </member>
        <member name="M:TShockAPI.DB.UserManager.GetGroupForIP(System.String)">
            <summary>
            Returns a Group for a ip from the database
            </summary>
            <param name="ply">string ip</param>
        </member>
        <member name="F:TShockAPI.UpdateManager.CheckXMinutes">
            <summary>
            Check once every X minutes.
            </summary>
        </member>
        <member name="M:TShockAPI.UpdateManager.ServerIsOutOfDate">
            <summary>
            Checks to see if the server is out of date.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TShockAPI.DB.SqlColumn.Length">
            <summary>
            Length of the data type, null = default
            </summary>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="name">Used for identification</param>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="M:Rests.RestCommand.#ctor(System.String,Rests.RestCommandD)">
            <summary>
            
            </summary>
            <param name="uritemplate">Url template</param>
            <param name="callback">Rest Command callback</param>
        </member>
        <member name="M:TShockAPI.DB.SqliteQueryCreator.AlterTable(TShockAPI.DB.SqlTable,TShockAPI.DB.SqlTable)">
            <summary>
            Alter a table from source to destination
            </summary>
            <param name="from">Must have name and column names. Column types are not required</param>
            <param name="to">Must have column names and column types.</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.DB.MysqlQueryCreator.AlterTable(TShockAPI.DB.SqlTable,TShockAPI.DB.SqlTable)">
            <summary>
            Alter a table from source to destination
            </summary>
            <param name="from">Must have name and column names. Column types are not required</param>
            <param name="to">Must have column names and column types.</param>
            <returns></returns>
        </member>
        <member name="M:TShockAPI.DB.RegionManager.ListAllRegions(System.String)">
            <summary>
            Gets all the regions names from world
            </summary>
            <param name="worldid">World name to get regions from</param>
            <returns>List of regions with only their names</returns>
        </member>
        <member name="M:TShockAPI.Log.Initialize(System.String,TShockAPI.LogLevel,System.Boolean)">
            <summary>
            Creates the log file stream and sets the initial log level.
            </summary>
            <param name="filename">The output filename. This file will be overwritten if 'clear' is set.</param>
            <param name="logLevel">The <see cref="T:TShockAPI.LogLevel"/> value which sets the type of messages to output.</param>
            <param name="clear">Whether or not to clear the log file on initialization.</param>
        </member>
        <member name="M:TShockAPI.Log.MayWriteType(TShockAPI.LogLevel)">
            <summary>
            Checks whether the log level contains the specified flag.
            </summary>
            <param name="type">The <see cref="T:TShockAPI.LogLevel"/> value to check.</param>
        </member>
        <member name="M:TShockAPI.Log.Data(System.String)">
            <summary>
            Writes data to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Error(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.ConsoleError(System.String)">
            <summary>
            Writes an error to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Warn(System.String)">
            <summary>
            Writes a warning to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Info(System.String)">
            <summary>
            Writes an informative string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.ConsoleInfo(System.String)">
            <summary>
            Writes an informative string to the log file. Also outputs to the console.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Debug(System.String)">
            <summary>
            Writes a debug string to the log file.
            </summary>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:TShockAPI.Log.Dispose">
            <summary>
            Disposes objects that are being used.
            </summary>
        </member>
        <member name="M:TShockAPI.Log.Write(System.String,TShockAPI.LogLevel)">
            <summary>
            Internal method which writes a message directly to the log file.
            </summary>
        </member>
        <member name="T:MaxMind.GeoIPCountry">
            <summary>
            Allows for looking up a country based on an IP address.  See www.maxmind.com for more details.
            </summary>
            <example>
            	static void Main(string[] args)
            	{
            		using(GeoIPCountry geo = new GeoIPCountry("GeoIP.dat"))
            		{
            			try
            			{
            				Console.WriteLine("Country code of IP address 67.15.94.80: " + geo.GetCountryCode("67.15.94.80"));
            			}
            			catch(Exception ex)
            			{
            				Console.WriteLine(ex.ToString());
            			}
            		}
            	}
            </example>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.IO.Stream)">
            <summary>
            Initialises a new instance of this class.
            </summary>
            <param name="datafile">An already open stream pointing to the contents of a GeoIP.dat file.</param>
            <remarks>The stream is not closed when this class is disposed. Be sure to clean up afterwards!</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.#ctor(System.String)">
            <summary>
            Initialises a new instance of this class, using an on-disk database.
            </summary>
            <param name="filename">Path to database file.</param>
            <remarks>The file will be closed when this class is disposed.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>A two-letter code string. Throws exceptions on failure.</returns>
            <remarks>The IP address must be IPv4.</remarks>
        </member>
        <member name="M:MaxMind.GeoIPCountry.TryGetCountryCode(System.Net.IPAddress)">
            <summary>
            Retrieves a two-letter code, defined by MaxMind, which details the country the specified IP address is located. Does not throw exceptions on failure.
            </summary>
            <param name="ip">IP address to query.</param>
            <returns>Two-letter country code or null on failure.</returns>
        </member>
        <member name="M:MaxMind.GeoIPCountry.GetCountryNameByCode(System.String)">
            <summary>
            Gets the English name of a country, by a country code.
            </summary>
            <param name="countrycode">Country code to look up, returned by GetCountryCode or TryGetCountryCode.</param>
            <returns>English name of the country, or null on failure.</returns>
        </member>
    </members>
</doc>
